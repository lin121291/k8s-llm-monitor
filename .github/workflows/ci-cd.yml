name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ai-powered-468303
  REGION: us-central1

jobs:
  # Test and quality checks
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Format code
      run: black src/ tests/ --check
    
    - name: Run tests
      run: pytest tests/ -v
      
    - name: Type checking
      run: mypy src/ || true

  # Build and deploy (only on main branch) - COMMENTED OUT FOR NOW
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Cloud SDK
  #     uses: google-github-actions/setup-gcloud@v2
  #     with:
  #       service_account_key: ${{ secrets.GCP_SA_KEY }}
  #       project_id: ${{ env.PROJECT_ID }}
  #   
  #   - name: Configure Docker
  #     run: gcloud auth configure-docker
  #   
  #   - name: Build and push image
  #     run: |
  #       docker build -t gcr.io/${{ env.PROJECT_ID }}/ai-monitor:${{ github.sha }} .
  #       docker push gcr.io/${{ env.PROJECT_ID }}/ai-monitor:${{ github.sha }}
  #       docker tag gcr.io/${{ env.PROJECT_ID }}/ai-monitor:${{ github.sha }} gcr.io/${{ env.PROJECT_ID }}/ai-monitor:latest
  #       docker push gcr.io/${{ env.PROJECT_ID }}/ai-monitor:latest
  #   
  #   - name: Set up Terraform
  #     uses: hashicorp/setup-terraform@v3
  #   
  #   - name: Deploy infrastructure
  #     working-directory: ./terraform
  #     run: |
  #       terraform init
  #       terraform apply -auto-approve -var="project_id=${{ env.PROJECT_ID }}"
  #   
  #   - name: Deploy to GKE
  #     run: |
  #       gcloud container clusters get-credentials ai-monitor-dev-gke --region ${{ env.REGION }}
  #       kubectl apply -f k8s/
  #       kubectl rollout status deployment/api-gateway -n ai-monitor --timeout=300s
  #   
  #   - name: Get service info
  #     run: |
  #       echo "Deployment completed!"
  #       kubectl get pods -n ai-monitor
  #       kubectl get services -n ai-monitor